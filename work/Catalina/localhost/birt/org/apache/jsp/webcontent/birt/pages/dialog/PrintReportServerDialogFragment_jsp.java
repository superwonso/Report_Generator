/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.23
 * Generated at: 2023-02-09 11:15:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.webcontent.birt.pages.dialog;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.eclipse.birt.report.presentation.aggregation.IFragment;
import org.eclipse.birt.report.IBirtConstants;
import java.util.ArrayList;
import java.util.Map;
import org.eclipse.birt.report.utility.Printer;
import org.eclipse.birt.report.utility.DataUtil;
import org.eclipse.birt.report.utility.PrintUtility;
import org.eclipse.birt.report.utility.ParameterAccessor;
import org.eclipse.birt.report.resource.BirtResources;

public final class PrintReportServerDialogFragment_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("org.eclipse.birt.report.utility.DataUtil");
    _jspx_imports_classes.add("org.eclipse.birt.report.resource.BirtResources");
    _jspx_imports_classes.add("org.eclipse.birt.report.utility.ParameterAccessor");
    _jspx_imports_classes.add("org.eclipse.birt.report.utility.PrintUtility");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("org.eclipse.birt.report.utility.Printer");
    _jspx_imports_classes.add("org.eclipse.birt.report.presentation.aggregation.IFragment");
    _jspx_imports_classes.add("org.eclipse.birt.report.IBirtConstants");
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');
      org.eclipse.birt.report.presentation.aggregation.IFragment fragment = null;
      fragment = (org.eclipse.birt.report.presentation.aggregation.IFragment) _jspx_page_context.getAttribute("fragment", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (fragment == null){
        throw new java.lang.InstantiationException("bean fragment not found within scope");
      }
      out.write("\n");
      out.write("\n");
      out.write("<SCRIPT LANGUAGE=\"javascript\">var index = 0;</SCRIPT>\n");

	boolean enable = ParameterAccessor.isSupportedPrintOnServer;
	if( enable )
	{
		String[] supportedFormats = ParameterAccessor.supportedFormats;
		for( int i=0; i<supportedFormats.length; i++ )
		{
			if( IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase( supportedFormats[i] ) )
			{
				enable = true;
				break;
			}
		}
	}
	
	if( enable )
	{
		ArrayList printers = (ArrayList)PrintUtility.findPrinters();
		for( int i=0; i<printers.size( ); i++ )
		{
			Printer bean = (Printer)printers.get( i );
			String name = PrintUtility.handleSlash( bean.getName( ) );
			String status = null; 
				
			if ( bean.getStatus() == Printer.STATUS_ACCEPTING_JOBS )
			{
				status = BirtResources.getMessage( "birt.viewer.dialog.printserver.status.acceptingjobs" ); // TODO: localized key
			}
			else 
			{
				status = BirtResources.getMessage( "birt.viewer.dialog.printserver.status.notacceptingjobs" ); // TODO: localized key
			}
			status = DataUtil.trimString( status );
			
			String model = DataUtil.trimString( bean.getModel( ) );
			String info = DataUtil.trimString( bean.getInfo( ) );
			String copies = "" + bean.getCopies( );
			String mode = "" + bean.getMode( );
			String duplex = "" + bean.getDuplex( );
			String mediaSize = DataUtil.trimString( bean.getMediaSize( ) );
			Map map = bean.getMediaSizeNames( );
			Object[] mediaSizeNames = map.keySet( ).toArray( );

      out.write("\n");
      out.write("\t\t\t<SCRIPT LANGUAGE=\"javascript\">\n");
      out.write("\t\t\t\tvar printer = new Printer( );\n");
      out.write("\t\t\t\tprinter.setName( \"");
      out.print( name );
      out.write("\" );\n");
      out.write("\t\t\t\tprinter.setStatus( \"");
      out.print( status );
      out.write("\" );\n");
      out.write("\t\t\t\tprinter.setModel( \"");
      out.print( model );
      out.write("\" );\n");
      out.write("\t\t\t\tprinter.setInfo( \"");
      out.print( info );
      out.write("\" );\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\t// Copies attribute\n");
      out.write("\t\t\t\t");

				if( bean.isCopiesSupported() )
				{
				
      out.write("\n");
      out.write("\t\t\t\tprinter.setCopiesSupported( true );\n");
      out.write("\t\t\t\tprinter.setCopies( \"");
      out.print( copies );
      out.write("\" );\n");
      out.write("\t\t\t\t");

				}
				else
				{
				
      out.write("\t\n");
      out.write("\t\t\t\tprinter.setCopiesSupported( false );\n");
      out.write("\t\t\t\t");

				}
				
      out.write("\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\t// Collate attribute\n");
      out.write("\t\t\t\t");

				if( bean.isCollateSupported() )
				{
				
      out.write("\n");
      out.write("\t\t\t\tprinter.setCollateSupported( true );\n");
      out.write("\t\t\t\t\t");

					if( bean.isCollate( ) )
					{
					
      out.write("\n");
      out.write("\t\t\t\tprinter.setCollate( true );\n");
      out.write("\t\t\t\t\t");

					}
					else
					{
					
      out.write("\n");
      out.write("\t\t\t\tprinter.setCollate( false );\t\n");
      out.write("\t\t\t\t");

					}
				}
				else
				{
				
      out.write("\t\n");
      out.write("\t\t\t\tprinter.setCopiesSupported( false );\n");
      out.write("\t\t\t\t");

				}
				
      out.write("\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\t// Mode attribute\n");
      out.write("\t\t\t\t");

				if( bean.isModeSupported( ) )
				{
				
      out.write("\n");
      out.write("\t\t\t\tprinter.setModeSupported( true );\n");
      out.write("\t\t\t\tprinter.setMode( \"");
      out.print( mode );
      out.write("\" );\n");
      out.write("\t\t\t\t");

				}
				else
				{
				
      out.write("\t\n");
      out.write("\t\t\t\tprinter.setModeSupported( false );\n");
      out.write("\t\t\t\t");

				}
				
      out.write("\t\t\t\t\n");
      out.write("\n");
      out.write("\t\t\t\t// Duplex attribute\n");
      out.write("\t\t\t\t");

				if( bean.isDuplexSupported( ) )
				{
				
      out.write("\n");
      out.write("\t\t\t\tprinter.setDuplexSupported( true );\n");
      out.write("\t\t\t\tprinter.setDuplex( \"");
      out.print( duplex );
      out.write("\" );\n");
      out.write("\t\t\t\t");

				}
				else
				{
				
      out.write("\t\n");
      out.write("\t\t\t\tprinter.setDuplexSupported( false );\n");
      out.write("\t\t\t\t");

				}
				
      out.write("\t\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\t// Media attribute\n");
      out.write("\t\t\t\t");

				if( bean.isMediaSupported( ) )
				{
				
      out.write("\n");
      out.write("\t\t\t\tprinter.setMediaSupported( true );\n");
      out.write("\t\t\t\tprinter.setMediaSize( \"");
      out.print( mediaSize );
      out.write("\" );\n");
      out.write("\t\t\t\t\t");

					for( int j=0; j<mediaSizeNames.length; j++ )
					{
						String mediaSizeName = DataUtil.trimString( (String)mediaSizeNames[j] );
						mediaSizeName = ParameterAccessor.htmlEncode( mediaSizeName );
					
      out.write("\n");
      out.write("\t\t\t\tprinter.addMediaSizeName( \"");
      out.print( mediaSizeName );
      out.write("\" );\t\t\t\t\t\t\n");
      out.write("\t\t\t\t");

					}
				}
				else
				{
				
      out.write("\t\n");
      out.write("\t\t\t\tprinter.setMediaSupported( false );\n");
      out.write("\t\t\t\t");

				}
				
      out.write("\t\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\tif( !printers[index] )\t\t\t\t\t\t\t\t\n");
      out.write("\t\t\t\t\tprinters[index] = {};\n");
      out.write("\t\t\t\t\t\n");
      out.write("\t\t\t\tprinters[index].name = printer.getName( );\n");
      out.write("\t\t\t\tprinters[index].value = printer;\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\tindex++;\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t</SCRIPT>\n");
		
		}
	}	

      out.write('\n');
      out.write("\n");
      out.write("<TABLE CELLSPACING=\"2\" CELLPADDING=\"2\" CLASS=\"birtviewer_dialog_body\">\n");
      out.write("\t<TR HEIGHT=\"5px\"><TD></TD></TR>\n");
      out.write("\t<TR>\n");
      out.write("\t\t<TD>\n");
      out.write("\t\t\t<INPUT TYPE=\"checkbox\" ID=\"print_onserver\" ");
if( !enable ) { 
      out.write("DISABLED=\"true\"");
}
      out.write("/>\n");
      out.write("\t\t\t");
      out.print(BirtResources.getMessage( "birt.viewer.dialog.printserver.onserver" ));
      out.write("\n");
      out.write("\t\t</TD>\n");
      out.write("\t</TR>\n");
      out.write("\t<TR HEIGHT=\"5px\"><TD></TD></TR>\n");
      out.write("\t<TR>\n");
      out.write("\t\t<TD>\n");
      out.write("\t\t\t<TABLE WIDTH=\"100%\" ID=\"printer_general\">\n");
      out.write("\t\t\t\t<TR>\n");
      out.write("\t\t\t\t\t<TD WIDTH=\"80px\">");
      out.print(BirtResources.getMessage( "birt.viewer.dialog.printserver.printer" ));
      out.write("</TD>\n");
      out.write("\t\t\t\t\t<TD>\t\t\t\t\t\t\n");
      out.write("\t\t\t\t\t\t<SELECT ID=\"printer\" CLASS=\"birtviewer_printreportserver_dialog_select\"></SELECT>\n");
      out.write("\t\t\t\t\t</TD>\n");
      out.write("\t\t\t\t</TR>\n");
      out.write("\t\t\t\t<TR>\n");
      out.write("\t\t\t\t\t<TD>");
      out.print(BirtResources.getMessage( "birt.viewer.dialog.printserver.status" ));
      out.write("</TD>\n");
      out.write("\t\t\t\t\t<TD><LABEL ID=\"printer_status\"></LABEL></TD>\n");
      out.write("\t\t\t\t</TR>\n");
      out.write("\t\t\t\t<TR>\n");
      out.write("\t\t\t\t\t<TD>");
      out.print(BirtResources.getMessage( "birt.viewer.dialog.printserver.model" ));
      out.write("</TD>\n");
      out.write("\t\t\t\t\t<TD><LABEL ID=\"printer_model\"></LABEL></TD>\n");
      out.write("\t\t\t\t</TR>\n");
      out.write("\t\t\t\t<TR>\n");
      out.write("\t\t\t\t\t<TD>");
      out.print(BirtResources.getMessage( "birt.viewer.dialog.printserver.description" ));
      out.write("</TD>\n");
      out.write("\t\t\t\t\t<TD><LABEL ID=\"printer_description\"></LABEL></TD>\n");
      out.write("\t\t\t\t</TR>\n");
      out.write("\t\t\t</TABLE>\n");
      out.write("\t\t</TD>\n");
      out.write("\t</TR>\t\t\t\n");
      out.write("\t<TR HEIGHT=\"5px\"><TD><HR/></TD></TR>\n");
      out.write("\t<TR>\n");
      out.write("\t\t<TD>");
      out.print(BirtResources.getMessage( "birt.viewer.dialog.printserver.settings" ));
      out.write("</TD>\n");
      out.write("\t</TR>\t\n");
      out.write("\t<TR>\n");
      out.write("\t\t<TD>\n");
      out.write("\t\t\t<TABLE WIDTH=\"100%\" ID=\"printer_config\">\n");
      out.write("\t\t\t\t<TR>\n");
      out.write("\t\t\t\t\t<TD WIDTH=\"100px\">\n");
      out.write("\t\t\t\t\t\t");
      out.print(BirtResources.getMessage( "birt.viewer.dialog.printserver.settings.copies" ));
      out.write("\n");
      out.write("\t\t\t\t\t</TD>\n");
      out.write("\t\t\t\t\t<TD>\n");
      out.write("\t\t\t\t\t\t<INPUT TYPE=\"text\" CLASS=\"birtviewer_printreportserver_dialog_input_short\" ID=\"printer_copies\"/>\n");
      out.write("\t\t\t\t\t\t&nbsp;&nbsp;");
      out.print(BirtResources.getMessage( "birt.viewer.dialog.printserver.settings.collate" ));
      out.write("&nbsp;&nbsp;<INPUT TYPE=\"checkbox\" ID=\"printer_collate\"/>\t\t\t\t\t\t\n");
      out.write("\t\t\t\t\t</TD>\n");
      out.write("\t\t\t\t</TR>\t\n");
      out.write("\t\t\t\t<TR>\n");
      out.write("\t\t\t\t\t<TD>\n");
      out.write("\t\t\t\t\t\t");
      out.print(BirtResources.getMessage( "birt.viewer.dialog.printserver.settings.duplex" ));
      out.write("\n");
      out.write("\t\t\t\t\t</TD>\n");
      out.write("\t\t\t\t\t<TD>\t\t\t\t\t\t\n");
      out.write("\t\t\t\t\t\t<INPUT TYPE=\"radio\" ID=\"printer_duplexSimplex\" NAME=\"printerDuplex\"/>");
      out.print(BirtResources.getMessage( "birt.viewer.dialog.printserver.settings.duplex.simplex" ));
      out.write("\n");
      out.write("\t\t\t\t\t\t&nbsp;&nbsp;<INPUT TYPE=\"radio\" ID=\"printer_duplexHorz\" NAME=\"printerDuplex\"/>");
      out.print(BirtResources.getMessage( "birt.viewer.dialog.printserver.settings.duplex.horizontal" ));
      out.write("\n");
      out.write("\t\t\t\t\t\t&nbsp;&nbsp;<INPUT TYPE=\"radio\" ID=\"printer_duplexVert\" NAME=\"printerDuplex\"/>");
      out.print(BirtResources.getMessage( "birt.viewer.dialog.printserver.settings.duplex.vertical" ));
      out.write("\t\t\t\n");
      out.write("\t\t\t\t\t</TD>\n");
      out.write("\t\t\t\t</TR>\n");
      out.write("\t\t\t\t<TR>\n");
      out.write("\t\t\t\t\t<TD>\n");
      out.write("\t\t\t\t\t\t");
      out.print(BirtResources.getMessage( "birt.viewer.dialog.printserver.settings.mode" ));
      out.write("\n");
      out.write("\t\t\t\t\t</TD>\n");
      out.write("\t\t\t\t\t<TD>\t\t\t\t\t\t\n");
      out.write("\t\t\t\t\t\t<INPUT TYPE=\"radio\" ID=\"printer_modeBW\" NAME=\"printerMode\"/>");
      out.print(BirtResources.getMessage( "birt.viewer.dialog.printserver.settings.mode.bw" ));
      out.write("\n");
      out.write("\t\t\t\t\t\t&nbsp;&nbsp;<INPUT TYPE=\"radio\" ID=\"printer_modeColor\" NAME=\"printerMode\"/>");
      out.print(BirtResources.getMessage( "birt.viewer.dialog.printserver.settings.mode.color" ));
      out.write("\t\t\t\n");
      out.write("\t\t\t\t\t</TD>\n");
      out.write("\t\t\t\t</TR>\n");
      out.write("\t\t\t\t<TR>\n");
      out.write("\t\t\t\t\t<TD>\n");
      out.write("\t\t\t\t\t\t");
      out.print(BirtResources.getMessage( "birt.viewer.dialog.printserver.settings.pagesize" ));
      out.write("\n");
      out.write("\t\t\t\t\t</TD>\t\t\t\t\n");
      out.write("\t\t\t\t\t<TD>\t\t\t\t\t\t\n");
      out.write("\t\t\t\t\t\t<SELECT ID=\"printer_mediasize\" CLASS=\"birtviewer_printreportserver_dialog_select\"></SELECT>\n");
      out.write("\t\t\t\t\t</TD>\n");
      out.write("\t\t\t\t</TR>\t\t\t\t\t\n");
      out.write("\t\t\t</TABLE>\n");
      out.write("\t\t</TD>\n");
      out.write("\t</TR>\t\n");
      out.write("\t<TR HEIGHT=\"5px\"><TD><HR/></TD></TR>\n");
      out.write("\t<TR>\n");
      out.write("\t\t<TD> \n");
      out.write("\t\t\t<DIV ID=\"printServerPageSetting\">\n");
      out.write("\t\t\t\t<TABLE>\n");
      out.write("\t\t\t\t\t<TR>\n");
      out.write("\t\t\t\t\t\t<TD>");
      out.print(BirtResources.getMessage( "birt.viewer.dialog.printserver.settings.print" ));
      out.write("</TD>\n");
      out.write("\t\t\t\t\t\t<TD STYLE=\"padding-left:5px\">\n");
      out.write("\t\t\t\t\t\t\t<INPUT TYPE=\"radio\" ID=\"printServerPageAll\" NAME=\"printServerPages\" CHECKED/>");
      out.print(BirtResources.getMessage( "birt.viewer.dialog.page.all" ));
      out.write("\n");
      out.write("\t\t\t\t\t\t</TD>\n");
      out.write("\t\t\t\t\t\t<TD STYLE=\"padding-left:5px\">\t\n");
      out.write("\t\t\t\t\t\t\t<INPUT TYPE=\"radio\" ID=\"printServerPageCurrent\" NAME=\"printServerPages\"/>");
      out.print(BirtResources.getMessage( "birt.viewer.dialog.page.current" ));
      out.write("\n");
      out.write("\t\t\t\t\t\t</TD>\n");
      out.write("\t\t\t\t\t\t<TD STYLE=\"padding-left:5px\">\t\n");
      out.write("\t\t\t\t\t\t\t<INPUT TYPE=\"radio\" ID=\"printServerPageRange\" NAME=\"printServerPages\"/>");
      out.print(BirtResources.getMessage( "birt.viewer.dialog.page.range" ));
      out.write("\n");
      out.write("\t\t\t\t\t\t\t<INPUT TYPE=\"text\" CLASS=\"birtviewer_printreportserver_dialog_input\" ID=\"printServerPageRange_input\"/>\n");
      out.write("\t\t\t\t\t\t</TD>\n");
      out.write("\t\t\t\t\t</TR>\n");
      out.write("\t\t\t\t</TABLE>\t\t\t\n");
      out.write("\t\t\t</DIV>\t\t\t\t\t\t\n");
      out.write("\t\t</TD>\n");
      out.write("\t</TR>\t\n");
      out.write("\t<TR>\n");
      out.write("\t\t<TD>&nbsp;&nbsp;");
      out.print(BirtResources.getMessage( "birt.viewer.dialog.page.range.description" ));
      out.write("</TD>\n");
      out.write("\t</TR>\t\n");
      out.write("\t<TR HEIGHT=\"5px\"><TD><HR/></TD></TR>\n");
      out.write("\t<TR>\n");
      out.write("\t\t<TD>\n");
      out.write("\t\t\t<DIV ID=\"printServerFitSetting\">\n");
      out.write("\t\t\t\t<TABLE>\n");
      out.write("\t\t\t\t\t<TR>\n");
      out.write("\t\t\t\t\t\t<TD>\n");
      out.write("\t\t\t\t\t\t\t<INPUT TYPE=\"radio\" ID=\"printServerFitToAuto\" NAME=\"printServerFit\" CHECKED/>");
      out.print(BirtResources.getHtmlMessage( "birt.viewer.dialog.export.pdf.fittoauto" ));
      out.write("\n");
      out.write("\t\t\t\t\t\t</TD>\n");
      out.write("\t\t\t\t\t\t<TD>\n");
      out.write("\t\t\t\t\t\t\t<INPUT TYPE=\"radio\" ID=\"printServerFitToActual\" NAME=\"printServerFit\"/>");
      out.print(BirtResources.getMessage( "birt.viewer.dialog.export.pdf.fittoactual" ));
      out.write("\n");
      out.write("\t\t\t\t\t\t</TD>\n");
      out.write("\t\t\t\t\t\t<TD STYLE=\"padding-left:5px\">\t\t\t\t\t\t\t\n");
      out.write("\t\t\t\t\t\t\t<INPUT TYPE=\"radio\" ID=\"printServerFitToWhole\" NAME=\"printServerFit\"/>");
      out.print(BirtResources.getMessage( "birt.viewer.dialog.export.pdf.fittowhole" ));
      out.write("\n");
      out.write("\t\t\t\t\t\t</TD>\n");
      out.write("\t\t\t\t\t<TR>\n");
      out.write("\t\t\t\t</TABLE>\t\t\t\n");
      out.write("\t\t\t</DIV>\t\t\t\n");
      out.write("\t\t</TD>\n");
      out.write("\t</TR>\n");
      out.write("\t<TR HEIGHT=\"5px\"><TD></TD></TR>\t\n");
      out.write("</TABLE>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
